{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Grupo 9 - OnePiece Este reposit\u00f3rio \u00e9 destinado ao projeto desenvolvido na disciplina de Sistemas de Bancos de Dados 1 na Universidade de Bras\u00edlia. Alunos Nome Matr\u00edcula Bernardo Chaves Pissutti 190103302 Luan Vasco Cavalcante 190111836 Nicolas Roberto de Queiroz 200042360 Thalisson Alves Goncalves de Jesus 190117401 Victor Rayan Adriano Ferreira 190044390 Game Ajude Monkey D. Luffy, um pirata que sonha em ser o Rei Dos Piratas e adora carne e festas, em sua jornada rumo ao seu sonho. O jogo acontece no mundo de One Piece, um anime impressionantemente surpreendente que conta a melhor hist\u00f3ria j\u00e1 contada. Luffy come\u00e7a sua jornada pirata no mar East Blue e come\u00e7a a juntar uma tripula\u00e7\u00e3o cheia de ambi\u00e7\u00f5es individuais que ganham um motivo especial para seguir seu capit\u00e3o. Voc\u00ea jogar\u00e1 com o Luffy e espero que a hist\u00f3ria emocionante do jogo e do anime te inspire a ser uma pessoa melhor !!! Autor do anime : Eiichiro Oda \"Kaizoku ou ni ore wa naru!\" - Monkey D. Luffy \"Eu serei o Rei dos Piratas!\" - Monkey D. Luffy Uso Docker para postgres Na raiz do projeto, d\u00ea o comando : sudo docker-compose up Para o pgAdmin4 abra seu navegador de prefer\u00eancia e v\u00e1 at\u00e9 a URL abaixo. Quando solicitado preencha o campo e-mail com postgres@email.com e o campo senho com postgres : localhost:8080 Ou para abrir o postgres no terminal, v\u00e1 para a raiz do projeto e rode o comando abaixo. Quando solicitado utilize a senha postgres : sudo docker-compose exec db psql -U postgres -W","title":"In\u00edcio"},{"location":"#grupo-9-onepiece","text":"Este reposit\u00f3rio \u00e9 destinado ao projeto desenvolvido na disciplina de Sistemas de Bancos de Dados 1 na Universidade de Bras\u00edlia.","title":"Grupo 9 - OnePiece"},{"location":"#alunos","text":"Nome Matr\u00edcula Bernardo Chaves Pissutti 190103302 Luan Vasco Cavalcante 190111836 Nicolas Roberto de Queiroz 200042360 Thalisson Alves Goncalves de Jesus 190117401 Victor Rayan Adriano Ferreira 190044390","title":"Alunos"},{"location":"#game","text":"Ajude Monkey D. Luffy, um pirata que sonha em ser o Rei Dos Piratas e adora carne e festas, em sua jornada rumo ao seu sonho. O jogo acontece no mundo de One Piece, um anime impressionantemente surpreendente que conta a melhor hist\u00f3ria j\u00e1 contada. Luffy come\u00e7a sua jornada pirata no mar East Blue e come\u00e7a a juntar uma tripula\u00e7\u00e3o cheia de ambi\u00e7\u00f5es individuais que ganham um motivo especial para seguir seu capit\u00e3o. Voc\u00ea jogar\u00e1 com o Luffy e espero que a hist\u00f3ria emocionante do jogo e do anime te inspire a ser uma pessoa melhor !!! Autor do anime : Eiichiro Oda \"Kaizoku ou ni ore wa naru!\" - Monkey D. Luffy \"Eu serei o Rei dos Piratas!\" - Monkey D. Luffy","title":"Game"},{"location":"#uso-docker-para-postgres","text":"Na raiz do projeto, d\u00ea o comando : sudo docker-compose up Para o pgAdmin4 abra seu navegador de prefer\u00eancia e v\u00e1 at\u00e9 a URL abaixo. Quando solicitado preencha o campo e-mail com postgres@email.com e o campo senho com postgres : localhost:8080 Ou para abrir o postgres no terminal, v\u00e1 para a raiz do projeto e rode o comando abaixo. Quando solicitado utilize a senha postgres : sudo docker-compose exec db psql -U postgres -W","title":"Uso Docker para postgres"},{"location":"apresentacao/","text":"Apresenta\u00e7\u00e3o M\u00f3dulo 1 Apresenta\u00e7\u00e3o M\u00f3dulo 2 Apresenta\u00e7\u00e3o M\u00f3dulo 2 Apresenta\u00e7\u00e3o M\u00f3dulo 3 Apresenta\u00e7\u00e3o M\u00f3dulo 3","title":"Apresenta\u00e7\u00f5es"},{"location":"apresentacao/#apresentacao-modulo-1","text":"","title":"Apresenta\u00e7\u00e3o  M\u00f3dulo 1"},{"location":"apresentacao/#apresentacao-modulo-2","text":"Apresenta\u00e7\u00e3o M\u00f3dulo 2","title":"Apresenta\u00e7\u00e3o  M\u00f3dulo 2"},{"location":"apresentacao/#apresentacao-modulo-3","text":"Apresenta\u00e7\u00e3o M\u00f3dulo 3","title":"Apresenta\u00e7\u00e3o  M\u00f3dulo 3"},{"location":"ddl/","text":"Vers\u00e3o Atual begin; -- Persongens CREATE TYPE personagem_ocupacao AS ENUM ( 'Pirata', 'Marinheiro', 'Cidadao' ); CREATE TYPE personagem_grupo_ocupacao AS ENUM ( 'Lider', 'Membro' ); CREATE TABLE IF NOT EXISTS personagem_principal ( id_personagem INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(20) NOT NULL, ocupacao personagem_ocupacao NOT NULL, grupo_ocupacao TEXT NOT NULL, berries INTEGER NOT NULL DEFAULT 0, CHECK(berries >= 0), energia INTEGER NOT NULL DEFAULT 0, CHECK(energia >= 0), fraqueza VARCHAR(20) NOT NULL, experiencia INTEGER NOT NULL, CHECK(experiencia >= 0), vida INTEGER NOT NULL, CHECK(vida >= 0), capacidade_de_itens INTEGER NOT NULL, CHECK(capacidade_de_itens > 0), PRIMARY KEY (id_personagem) ); CREATE TABLE IF NOT EXISTS inimigo ( id_personagem INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(20) NOT NULL, ocupacao personagem_ocupacao NOT NULL, grupo_ocupacao TEXT NOT NULL, berries INTEGER NOT NULL DEFAULT 0, CHECK(berries >= 0), energia INTEGER NOT NULL DEFAULT 0, CHECK(energia >= 0), fraqueza VARCHAR(20) NOT NULL, experiencia INTEGER NOT NULL, CHECK(experiencia >= 0), vida INTEGER NOT NULL, CHECK(vida >= 0), PRIMARY KEY (id_personagem) ); CREATE TABLE IF NOT EXISTS personagem_nao_hostil ( id_personagem INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(20) NOT NULL, ocupacao personagem_ocupacao NOT NULL, grupo_ocupacao TEXT NOT NULL, is_vendedor BOOLEAN NOT NULL DEFAULT FALSE, is_personagem_historia BOOLEAN NOT NULL DEFAULT FALSE, id_missao INTEGER DEFAULT NULL, PRIMARY KEY (id_personagem) ); CREATE TABLE IF NOT EXISTS barco ( id_barco INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(20) NOT NULL, ocupacao personagem_ocupacao NOT NULL, grupo_ocupacao personagem_grupo_ocupacao NOT NULL, capacidade_de_itens INTEGER NOT NULL DEFAULT 0, CHECK(capacidade_de_itens >= 0), PRIMARY KEY (id_barco) ); CREATE TABLE IF NOT EXISTS poder_especial ( nome VARCHAR(20) NOT NULL, id_personagem_principal INTEGER NOT NULL, descricao TEXT NOT NULL DEFAULT '', dano INTEGER NOT NULL, CHECK(dano >= 0), energia INTEGER NOT NULL, CHECK(energia >= 0), PRIMARY KEY (nome, id_personagem_principal), CONSTRAINT fk_personagem_principal FOREIGN KEY (id_personagem_principal) REFERENCES personagem_principal(id_personagem) ON DELETE RESTRICT ); -- Itens CREATE TABLE IF NOT EXISTS item ( id_item INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(20) NOT NULL, descricao TEXT NOT NULL DEFAULT '', preco INTEGER NOT NULL, CHECK(preco >= 0), qtd_energia INTEGER NOT NULL, CHECK(qtd_energia >= 0), qtd_vida INTEGER NOT NULL, CHECK(qtd_vida >= 0), qtd_dano INTEGER, CHECK(qtd_dano >= 0), is_equipavel BOOLEAN NOT NULL, PRIMARY KEY (id_item) ); CREATE TABLE IF NOT EXISTS inventario ( id_personagem INTEGER NOT NULL, id_item INTEGER DEFAULT NULL, qtd_item INTEGER DEFAULT NULL, CONSTRAINT fk_personagem_inventario FOREIGN KEY (id_personagem) REFERENCES personagem_principal(id_personagem) ON DELETE RESTRICT, CONSTRAINT fk_item FOREIGN KEY (id_item) REFERENCES item(id_item) ON DELETE RESTRICT, CONSTRAINT pk_inventario PRIMARY KEY (id_personagem, id_item) ); -- Miss\u00e3o CREATE TABLE IF NOT EXISTS missao ( id_missao INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(35) NOT NULL, descricao TEXT NOT NULL DEFAULT '', qtd_experiencia INTEGER NOT NULL, CHECK(qtd_experiencia >= 0), dificuldade INTEGER NOT NULL, CHECK(dificuldade >= 0), id_personagem INTEGER NOT NULL, CONSTRAINT fk_personagem FOREIGN KEY (id_personagem) REFERENCES personagem_nao_hostil(id_personagem) ON DELETE RESTRICT, PRIMARY KEY (id_missao) ); CREATE TYPE objetivo_tipo AS ENUM ( 'PegarItem', 'DerrotarInimigo', 'FalarComNPC' ); CREATE TABLE IF NOT EXISTS objetivo ( id_missao INTEGER NOT NULL, id_objetivo INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(35) NOT NULL, descricao TEXT NOT NULL DEFAULT '', tipo objetivo_tipo NOT NULL, id_item INTEGER NULL, id_inimigo INTEGER NULL, id_nao_hostil INTEGER NULL, is_active BOOLEAN NOT NULL DEFAULT FALSE, is_completed BOOLEAN NOT NULL DEFAULT FALSE, PRIMARY KEY (id_missao, id_objetivo), CONSTRAINT fk_missao FOREIGN KEY (id_missao) REFERENCES missao(id_missao) ON DELETE RESTRICT, CONSTRAINT fk_item FOREIGN KEY (id_item) REFERENCES item(id_item) ON DELETE RESTRICT, CONSTRAINT fk_inimigo FOREIGN KEY (id_inimigo) REFERENCES inimigo(id_personagem) ON DELETE RESTRICT, CONSTRAINT fk_nao_hostil FOREIGN KEY (id_nao_hostil) REFERENCES personagem_nao_hostil(id_personagem) ON DELETE RESTRICT ); -- Regi\u00e3o CREATE TABLE IF NOT EXISTS ilha ( id_ilha INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(30) NOT NULL, descricao TEXT NOT NULL DEFAULT '', PRIMARY KEY (id_ilha) ); CREATE TYPE regiao_tipo AS ENUM ( 'Cidade', 'Floresta', 'Deserto', 'Montanha' ); CREATE TABLE IF NOT EXISTS regiao ( id_regiao INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, descricao TEXT NOT NULL DEFAULT '', tipo regiao_tipo, norte INTEGER, sul INTEGER, leste INTEGER, oeste INTEGER, id_ilha INTEGER, CONSTRAINT pk_regiao PRIMARY KEY (id_regiao), CONSTRAINT fk_regiao_norte FOREIGN KEY (norte) REFERENCES regiao(id_regiao) ON DELETE RESTRICT, CONSTRAINT fk_regiao_sul FOREIGN KEY (sul) REFERENCES regiao(id_regiao) ON DELETE RESTRICT, CONSTRAINT fk_regiao_leste FOREIGN KEY (leste) REFERENCES regiao(id_regiao) ON DELETE RESTRICT, CONSTRAINT fk_regiao_oeste FOREIGN KEY (oeste) REFERENCES regiao(id_regiao) ON DELETE RESTRICT, CONSTRAINT fk_regiao_ilha FOREIGN KEY (id_ilha) REFERENCES ilha(id_ilha) ON DELETE RESTRICT ); commit; Vers\u00f5es Anteriores","title":"DDL"},{"location":"ddl/#versao-atual","text":"begin; -- Persongens CREATE TYPE personagem_ocupacao AS ENUM ( 'Pirata', 'Marinheiro', 'Cidadao' ); CREATE TYPE personagem_grupo_ocupacao AS ENUM ( 'Lider', 'Membro' ); CREATE TABLE IF NOT EXISTS personagem_principal ( id_personagem INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(20) NOT NULL, ocupacao personagem_ocupacao NOT NULL, grupo_ocupacao TEXT NOT NULL, berries INTEGER NOT NULL DEFAULT 0, CHECK(berries >= 0), energia INTEGER NOT NULL DEFAULT 0, CHECK(energia >= 0), fraqueza VARCHAR(20) NOT NULL, experiencia INTEGER NOT NULL, CHECK(experiencia >= 0), vida INTEGER NOT NULL, CHECK(vida >= 0), capacidade_de_itens INTEGER NOT NULL, CHECK(capacidade_de_itens > 0), PRIMARY KEY (id_personagem) ); CREATE TABLE IF NOT EXISTS inimigo ( id_personagem INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(20) NOT NULL, ocupacao personagem_ocupacao NOT NULL, grupo_ocupacao TEXT NOT NULL, berries INTEGER NOT NULL DEFAULT 0, CHECK(berries >= 0), energia INTEGER NOT NULL DEFAULT 0, CHECK(energia >= 0), fraqueza VARCHAR(20) NOT NULL, experiencia INTEGER NOT NULL, CHECK(experiencia >= 0), vida INTEGER NOT NULL, CHECK(vida >= 0), PRIMARY KEY (id_personagem) ); CREATE TABLE IF NOT EXISTS personagem_nao_hostil ( id_personagem INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(20) NOT NULL, ocupacao personagem_ocupacao NOT NULL, grupo_ocupacao TEXT NOT NULL, is_vendedor BOOLEAN NOT NULL DEFAULT FALSE, is_personagem_historia BOOLEAN NOT NULL DEFAULT FALSE, id_missao INTEGER DEFAULT NULL, PRIMARY KEY (id_personagem) ); CREATE TABLE IF NOT EXISTS barco ( id_barco INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(20) NOT NULL, ocupacao personagem_ocupacao NOT NULL, grupo_ocupacao personagem_grupo_ocupacao NOT NULL, capacidade_de_itens INTEGER NOT NULL DEFAULT 0, CHECK(capacidade_de_itens >= 0), PRIMARY KEY (id_barco) ); CREATE TABLE IF NOT EXISTS poder_especial ( nome VARCHAR(20) NOT NULL, id_personagem_principal INTEGER NOT NULL, descricao TEXT NOT NULL DEFAULT '', dano INTEGER NOT NULL, CHECK(dano >= 0), energia INTEGER NOT NULL, CHECK(energia >= 0), PRIMARY KEY (nome, id_personagem_principal), CONSTRAINT fk_personagem_principal FOREIGN KEY (id_personagem_principal) REFERENCES personagem_principal(id_personagem) ON DELETE RESTRICT ); -- Itens CREATE TABLE IF NOT EXISTS item ( id_item INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(20) NOT NULL, descricao TEXT NOT NULL DEFAULT '', preco INTEGER NOT NULL, CHECK(preco >= 0), qtd_energia INTEGER NOT NULL, CHECK(qtd_energia >= 0), qtd_vida INTEGER NOT NULL, CHECK(qtd_vida >= 0), qtd_dano INTEGER, CHECK(qtd_dano >= 0), is_equipavel BOOLEAN NOT NULL, PRIMARY KEY (id_item) ); CREATE TABLE IF NOT EXISTS inventario ( id_personagem INTEGER NOT NULL, id_item INTEGER DEFAULT NULL, qtd_item INTEGER DEFAULT NULL, CONSTRAINT fk_personagem_inventario FOREIGN KEY (id_personagem) REFERENCES personagem_principal(id_personagem) ON DELETE RESTRICT, CONSTRAINT fk_item FOREIGN KEY (id_item) REFERENCES item(id_item) ON DELETE RESTRICT, CONSTRAINT pk_inventario PRIMARY KEY (id_personagem, id_item) ); -- Miss\u00e3o CREATE TABLE IF NOT EXISTS missao ( id_missao INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(35) NOT NULL, descricao TEXT NOT NULL DEFAULT '', qtd_experiencia INTEGER NOT NULL, CHECK(qtd_experiencia >= 0), dificuldade INTEGER NOT NULL, CHECK(dificuldade >= 0), id_personagem INTEGER NOT NULL, CONSTRAINT fk_personagem FOREIGN KEY (id_personagem) REFERENCES personagem_nao_hostil(id_personagem) ON DELETE RESTRICT, PRIMARY KEY (id_missao) ); CREATE TYPE objetivo_tipo AS ENUM ( 'PegarItem', 'DerrotarInimigo', 'FalarComNPC' ); CREATE TABLE IF NOT EXISTS objetivo ( id_missao INTEGER NOT NULL, id_objetivo INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(35) NOT NULL, descricao TEXT NOT NULL DEFAULT '', tipo objetivo_tipo NOT NULL, id_item INTEGER NULL, id_inimigo INTEGER NULL, id_nao_hostil INTEGER NULL, is_active BOOLEAN NOT NULL DEFAULT FALSE, is_completed BOOLEAN NOT NULL DEFAULT FALSE, PRIMARY KEY (id_missao, id_objetivo), CONSTRAINT fk_missao FOREIGN KEY (id_missao) REFERENCES missao(id_missao) ON DELETE RESTRICT, CONSTRAINT fk_item FOREIGN KEY (id_item) REFERENCES item(id_item) ON DELETE RESTRICT, CONSTRAINT fk_inimigo FOREIGN KEY (id_inimigo) REFERENCES inimigo(id_personagem) ON DELETE RESTRICT, CONSTRAINT fk_nao_hostil FOREIGN KEY (id_nao_hostil) REFERENCES personagem_nao_hostil(id_personagem) ON DELETE RESTRICT ); -- Regi\u00e3o CREATE TABLE IF NOT EXISTS ilha ( id_ilha INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, nome VARCHAR(30) NOT NULL, descricao TEXT NOT NULL DEFAULT '', PRIMARY KEY (id_ilha) ); CREATE TYPE regiao_tipo AS ENUM ( 'Cidade', 'Floresta', 'Deserto', 'Montanha' ); CREATE TABLE IF NOT EXISTS regiao ( id_regiao INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, descricao TEXT NOT NULL DEFAULT '', tipo regiao_tipo, norte INTEGER, sul INTEGER, leste INTEGER, oeste INTEGER, id_ilha INTEGER, CONSTRAINT pk_regiao PRIMARY KEY (id_regiao), CONSTRAINT fk_regiao_norte FOREIGN KEY (norte) REFERENCES regiao(id_regiao) ON DELETE RESTRICT, CONSTRAINT fk_regiao_sul FOREIGN KEY (sul) REFERENCES regiao(id_regiao) ON DELETE RESTRICT, CONSTRAINT fk_regiao_leste FOREIGN KEY (leste) REFERENCES regiao(id_regiao) ON DELETE RESTRICT, CONSTRAINT fk_regiao_oeste FOREIGN KEY (oeste) REFERENCES regiao(id_regiao) ON DELETE RESTRICT, CONSTRAINT fk_regiao_ilha FOREIGN KEY (id_ilha) REFERENCES ilha(id_ilha) ON DELETE RESTRICT ); commit;","title":"Vers\u00e3o Atual"},{"location":"ddl/#versoes-anteriores","text":"","title":"Vers\u00f5es Anteriores"},{"location":"der/","text":"Vers\u00e3o Atual Vers\u00f5es Anteriores Modulo 1","title":"Diagrama Entidade Relacionamento"},{"location":"der/#versao-atual","text":"","title":"Vers\u00e3o Atual"},{"location":"der/#versoes-anteriores","text":"","title":"Vers\u00f5es Anteriores"},{"location":"der/#modulo-1","text":"","title":"Modulo 1"},{"location":"dml/","text":"Vers\u00e3o Atual INSERT INTO item (id_item,nome, descricao, preco, qtd_energia, qtd_vida, qtd_dano, is_equipavel) VALUES (1,'bergamota', 'Recupera vida', 10, 0, 20, NULL, FALSE), (2,'melancia', 'Recupera vida', 10, 20, 0, NULL, FALSE), (3,'guarana', 'Recupera vida', 30, 10, 10, NULL, FALSE), (4,'abacaxi', 'Recupera vida', 50, 20, 20, NULL, FALSE), (5,'laminada', 'aumenta o dano do personagem quando equipado', 15, 60, 10, 15, TRUE), (6,'rapidez', 'aumenta o dano do personagem quando equipado', 8, 90, 5, 12, TRUE); INSERT INTO personagem_principal (id_personagem, nome,ocupacao,grupo_ocupacao,berries,energia,fraqueza,experiencia,vida,capacidade_de_itens) VALUES (1,'Monkey D. Luffy','Pirata','Piratas do Chap\u00e9u de Palha',150,100,'Kairoseki',1,120,10), (2,'Roronoa Zoro','Pirata','Piratas do Chap\u00e9u de Palha',100,100,'Cortar Ferro',1,100,10), (3,'Sanji','Pirata','Piratas do Chap\u00e9u de Palha',1000,100,'Cortar Ferro',1,100,15), (4,'Nami','Pirata','Piratas do Chap\u00e9u de Palha',1000000,75,'Trit\u00f5es',1,100,8); INSERT INTO barco (id_barco,nome, ocupacao, grupo_ocupacao, capacidade_de_itens) VALUES (1,'Thousand Sunny', 'Pirata', 'Membro', 400), (2,'Miss Love Duck', 'Pirata', 'Membro', 250), (3,'Utan Sonar', 'Pirata', 'Membro', 300), (4,'Moby Dick', 'Pirata', 'Membro', 350), (5,'Holand\u00eas Voador', 'Pirata', 'Membro', 500); INSERT INTO poder_especial (nome, id_personagem_principal, descricao, dano, energia) VALUES ('Gomu gomu no Hammer', 1, 'cascudo com as duas m\u00e3os', 300, 400), ('Bounceman',1,' cobre seus bra\u00e7os com Busoshoku Haki antes de morder seu antebra\u00e7o. Semelhante \u00e0 forma como ele ativa o Gear Third, ele sopra uma incr\u00edvel quantidade de ar em seu corpo, mas desta vez ele infla sua estrutura muscular antes de distribuir o ar em todo o seu corpo, com \u00eanfase na sua metade superior.',800,250), ('Tankman', 1, 'Nesta forma, ele se assemelha a uma bola com propor\u00e7\u00f5es exageradas: enquanto seus bra\u00e7os e pernas s\u00e3o ligeiramente pequenos em rela\u00e7\u00e3o ao corpo, seu torso com Busoshoku Haki-revestido torna-se muito maior e completamente redondo, embora ainda h\u00e1 m\u00fasculos nos bra\u00e7os e no peitoral.', 900, 300), ('Snakeman', 1, 'Em vez de vapor, essa forma produz uma subst\u00e2ncia gasosa que aparece como uma mistura de vapor e fogo e, como suas outras contrapartes, tamb\u00e9m parece ser colocada sobre seus ombros como um len\u00e7o, enquanto sob esta forma. Seus punhos tamb\u00e9m se flexionam diferentemente, com os primeiros n\u00f3s dos dedos sendo estendidos, semelhante ao punho de leopardo.', 950, 350), ('Kinniku Fusen', 1, 'd\u00e1 um soco como um Gomu Gomu no Pistol, mas ele pode redirecionar seu soco \u00e0 um n\u00famero indeterminado de vezes, sem perder o impulso, mantendo a sua for\u00e7a tremenda.', 1000, 500); INSERT INTO inimigo (nome,ocupacao,grupo_ocupacao,berries,energia,fraqueza,experiencia,vida) VALUES ('Marinheiro 1','Marinheiro','Marinha',150,100,'Akuma no mi',1,100), ('Marinheiro 2','Marinheiro','Marinha',250,100,'Akuma no mi',2,100), ('Marinheiro 3','Marinheiro','Marinha',500,100,'Raki',3,100), ('Marinheiro 4','Marinheiro','Marinha',1000,100,'Raki do rei',4,100), ('Akainu','Marinheiro','Almirante da Marinha',1000000,10000,'Kairoseki',10,10000), ('Alkiji','Marinheiro','Almirante da Marinha',900000,10000,'Kairoseki',10,10000), ('Kizaru','Marinheiro','Almirante da Marinha',1200000,10000,'Kairoseki',10,10000), ('Alvida','Pirata','Piratas Alvida',1000,100,'Akuma no mi',1,100), ('Morgan','Marinheiro','Capit\u00e3o da Marinha',3000,150,'Akuma no mi',1,100), ('Buggy','Pirata','Capit\u00e3o dos Piratas Buggy',1000,200,'Akuma no mi',2,150), ('Arlong','Pirata','Capit\u00e3o dos Piratas do Arlong',50000,250,'Akuma no mi',3,250); INSERT INTO ilha (id_ilha,nome,descricao) VALUES (1,'Ilha do Capit\u00e3o Morgan','Ilha com uma base da Marinha, comandada pelo Capit\u00e3o Morgan. Um marinheiro temido tanto pela popula\u00e7\u00e3o quanto pela marinha.Zoro aparece capturado nessa ilha'), (2,'Orange Town','Ilha tomada pelo Buggy, cujo prefeito se chama Boodle'), (3,'Vila Syrup','Vila da ilhas Geecko, onde Usopp, um grande Guerreiro do mar com mais de 8 mil seguidores, vive'), (4,'Baratie','Restaurante Mar\u00edtmo comandado pelo chefe Zeff. Zeff tem um filho chamado Sanji, um cozinheiro rom\u00e2ntico que ama mulheres.'), (5,'Ilhas Conami','Arquip\u00e9logo de Ilhas onde Nami nasceu. Era um arquip\u00e9logo quieto, at\u00e9 Arlong e seus piratas chegarem.'); INSERT INTO personagem_nao_hostil (id_personagem, nome, ocupacao, grupo_ocupacao, is_vendedor, is_personagem_historia) VALUES (1,'Coby', 'Cidadao', 'Nenhum', false, true), (2,'vendedor', 'Cidadao', 'Comercializar itens basicos', true, false), (3,'M\u00e3e da Rika', 'Cidadao', 'Dona de casa', false, true), (4,'Rika', 'Cidadao', 'Brincar', false, true), (5,'Marinheiro', 'Marinheiro', 'Patrulhar', false, false), (6,'Prefeito', 'Cidadao', 'Gerir um ilha', false, false), (7,'Comerciante', 'Cidadao', 'Vender e comprar itens de pessoas', true, false), (8,'Chuchu', 'Cidadao', 'Ser um cachorro', false, true); INSERT INTO inventario (id_personagem, id_item, qtd_item) VALUES (1, 1, 1), (1, 2, 3), (1, 3, 2), (1, 4, 3), (1, 5, 2); -- Miss\u00f5es INSERT INTO missao (id_missao, nome, descricao, qtd_experiencia, dificuldade, id_personagem) VALUES (1,'Come\u00e7o da jornada', 'Luffy derrota Alvida e segue sua viagem junto de Coby pra formar uma tripula\u00e7\u00e3o', 10, 0, 1), (2,'O grande espadachim aparece', 'Luffy e Coby conhecem e libertam o Ca\u00e7ador de Piratas Roronoa Zoro, que foi preso pelo Capit\u00e3o Morgan e seu filho Helmeppo', 10, 0, 1), (3,'Morgan VS Luffy', 'Luffy e o mais novo membro de sua tripula\u00e7\u00e3o, Roronoa Zoro, lutam contra o Capit\u00e3o Morgan', 10, 0, 1), (4,'Palha\u00e7o-Pirata, Capit\u00e3o Buggy', 'Luffy e Zoro se deparam o Capit\u00e3o Buggy', 10, 0, 1), (5,'Mohji, o domador VS Luffy', 'Luffy consegue se libertar da jaula em que estava preso e luta contra Mohji e Richie', 10, 0, 1); INSERT INTO objetivo (id_missao, nome, descricao, tipo, id_item, id_inimigo, id_nao_hostil) VALUES (1, '', 'Luffy derrota piratas do bando da Alvida', 'DerrotarInimigo', NULL, NULL, NULL), (1, '', 'Luffy da o golpe final e manda Alvida pelos ares', 'DerrotarInimigo', NULL, NULL, NULL), (2, '', 'Luffy derrota os marinheiros que estavam guardando as espadas de Roronoa Zoro', 'DerrotarInimigo', NULL, NULL, NULL), (2, '', 'Luffy pega as espadas de Roronoa Zoro, que tinham sido confiscadas pela marinha', 'PegarItem', NULL, NULL, NULL), (2, '', 'Luffy liberta Roronoa Zoro e devolve suas espadas', 'FalarComNPC', NULL, NULL, NULL), (3, '', 'Luffy e Zoro derrotam os marinheiros que estavam protegendo o Capit\u00e3o Morgan', 'DerrotarInimigo', NULL, NULL, NULL), (3, '', 'Luffy e Zoro vencem o Capit\u00e3o Morgan', 'DerrotarInimigo', NULL, NULL, NULL), (3, '', 'Coby se dispede de Luffy para seguir sua ambi\u00e7\u00e3o de se tornar um marinheiro.', 'FalarComNPC', NULL, NULL, NULL), (4, '', 'Luffy derrota piratas do Capit\u00e3o Buggy', 'DerrotarInimigo', NULL, NULL, NULL), (4, '', 'Nami engana Luffy e o entrega para Buggy', 'DerrotarInimigo', NULL, NULL, NULL), (4, '', 'Luffy enfrenta Richie', 'DerrotarInimigo', NULL, NULL, NULL); insert into regiao (descricao,tipo,norte,sul,leste,oeste,id_ilha) values ('Porto onde voc\u00ea pode viajar para outras cidades','Cidade',2,NULL,NULL,4,1), -- 1 ('Feira onde voc\u00ea pode comprar itens','Cidade',3,NULL,1,NULL,1), -- 2 ('Taverna onde voc\u00ea encontra variedades da cacha\u00e7a, mas o Luffy s\u00f3 toma leite','Cidade',NULL,3,2,NULL,1), -- 3 ('Base da Marinha, parece que Zoro se encontra l\u00e1, Converse com Rika.','Cidade',NULL,1,NULL,3,1), -- 4 ('Porto de Orange Town','Cidade',6,NULL,7,NULL,2), -- 5 ('Loja Cachorro Xuxu','Cidade',NULL,7,5,NULL,2), -- 6 ('Base Buggy','Cidade',NULL,8,NULL,6,2), -- 7 ('Casa do Prefeito','Cidade',7,NULL,NULL,5,2),-- 8 ('Porto sa\u00edda Sul','Cidade',10,NULL,12,NULL,3), -- 9 ('Loja Cachorro Xuxu','Cidade',NULL,7,5,NULL,3), -- 10 ('Base Buggy','Cidade',NULL,8,NULL,6,3), -- 11 ('Casa do Prefeito','Cidade',7,NULL,NULL,5,3); -- 12 Vers\u00f5es Anteriores","title":"DML"},{"location":"dml/#versao-atual","text":"INSERT INTO item (id_item,nome, descricao, preco, qtd_energia, qtd_vida, qtd_dano, is_equipavel) VALUES (1,'bergamota', 'Recupera vida', 10, 0, 20, NULL, FALSE), (2,'melancia', 'Recupera vida', 10, 20, 0, NULL, FALSE), (3,'guarana', 'Recupera vida', 30, 10, 10, NULL, FALSE), (4,'abacaxi', 'Recupera vida', 50, 20, 20, NULL, FALSE), (5,'laminada', 'aumenta o dano do personagem quando equipado', 15, 60, 10, 15, TRUE), (6,'rapidez', 'aumenta o dano do personagem quando equipado', 8, 90, 5, 12, TRUE); INSERT INTO personagem_principal (id_personagem, nome,ocupacao,grupo_ocupacao,berries,energia,fraqueza,experiencia,vida,capacidade_de_itens) VALUES (1,'Monkey D. Luffy','Pirata','Piratas do Chap\u00e9u de Palha',150,100,'Kairoseki',1,120,10), (2,'Roronoa Zoro','Pirata','Piratas do Chap\u00e9u de Palha',100,100,'Cortar Ferro',1,100,10), (3,'Sanji','Pirata','Piratas do Chap\u00e9u de Palha',1000,100,'Cortar Ferro',1,100,15), (4,'Nami','Pirata','Piratas do Chap\u00e9u de Palha',1000000,75,'Trit\u00f5es',1,100,8); INSERT INTO barco (id_barco,nome, ocupacao, grupo_ocupacao, capacidade_de_itens) VALUES (1,'Thousand Sunny', 'Pirata', 'Membro', 400), (2,'Miss Love Duck', 'Pirata', 'Membro', 250), (3,'Utan Sonar', 'Pirata', 'Membro', 300), (4,'Moby Dick', 'Pirata', 'Membro', 350), (5,'Holand\u00eas Voador', 'Pirata', 'Membro', 500); INSERT INTO poder_especial (nome, id_personagem_principal, descricao, dano, energia) VALUES ('Gomu gomu no Hammer', 1, 'cascudo com as duas m\u00e3os', 300, 400), ('Bounceman',1,' cobre seus bra\u00e7os com Busoshoku Haki antes de morder seu antebra\u00e7o. Semelhante \u00e0 forma como ele ativa o Gear Third, ele sopra uma incr\u00edvel quantidade de ar em seu corpo, mas desta vez ele infla sua estrutura muscular antes de distribuir o ar em todo o seu corpo, com \u00eanfase na sua metade superior.',800,250), ('Tankman', 1, 'Nesta forma, ele se assemelha a uma bola com propor\u00e7\u00f5es exageradas: enquanto seus bra\u00e7os e pernas s\u00e3o ligeiramente pequenos em rela\u00e7\u00e3o ao corpo, seu torso com Busoshoku Haki-revestido torna-se muito maior e completamente redondo, embora ainda h\u00e1 m\u00fasculos nos bra\u00e7os e no peitoral.', 900, 300), ('Snakeman', 1, 'Em vez de vapor, essa forma produz uma subst\u00e2ncia gasosa que aparece como uma mistura de vapor e fogo e, como suas outras contrapartes, tamb\u00e9m parece ser colocada sobre seus ombros como um len\u00e7o, enquanto sob esta forma. Seus punhos tamb\u00e9m se flexionam diferentemente, com os primeiros n\u00f3s dos dedos sendo estendidos, semelhante ao punho de leopardo.', 950, 350), ('Kinniku Fusen', 1, 'd\u00e1 um soco como um Gomu Gomu no Pistol, mas ele pode redirecionar seu soco \u00e0 um n\u00famero indeterminado de vezes, sem perder o impulso, mantendo a sua for\u00e7a tremenda.', 1000, 500); INSERT INTO inimigo (nome,ocupacao,grupo_ocupacao,berries,energia,fraqueza,experiencia,vida) VALUES ('Marinheiro 1','Marinheiro','Marinha',150,100,'Akuma no mi',1,100), ('Marinheiro 2','Marinheiro','Marinha',250,100,'Akuma no mi',2,100), ('Marinheiro 3','Marinheiro','Marinha',500,100,'Raki',3,100), ('Marinheiro 4','Marinheiro','Marinha',1000,100,'Raki do rei',4,100), ('Akainu','Marinheiro','Almirante da Marinha',1000000,10000,'Kairoseki',10,10000), ('Alkiji','Marinheiro','Almirante da Marinha',900000,10000,'Kairoseki',10,10000), ('Kizaru','Marinheiro','Almirante da Marinha',1200000,10000,'Kairoseki',10,10000), ('Alvida','Pirata','Piratas Alvida',1000,100,'Akuma no mi',1,100), ('Morgan','Marinheiro','Capit\u00e3o da Marinha',3000,150,'Akuma no mi',1,100), ('Buggy','Pirata','Capit\u00e3o dos Piratas Buggy',1000,200,'Akuma no mi',2,150), ('Arlong','Pirata','Capit\u00e3o dos Piratas do Arlong',50000,250,'Akuma no mi',3,250); INSERT INTO ilha (id_ilha,nome,descricao) VALUES (1,'Ilha do Capit\u00e3o Morgan','Ilha com uma base da Marinha, comandada pelo Capit\u00e3o Morgan. Um marinheiro temido tanto pela popula\u00e7\u00e3o quanto pela marinha.Zoro aparece capturado nessa ilha'), (2,'Orange Town','Ilha tomada pelo Buggy, cujo prefeito se chama Boodle'), (3,'Vila Syrup','Vila da ilhas Geecko, onde Usopp, um grande Guerreiro do mar com mais de 8 mil seguidores, vive'), (4,'Baratie','Restaurante Mar\u00edtmo comandado pelo chefe Zeff. Zeff tem um filho chamado Sanji, um cozinheiro rom\u00e2ntico que ama mulheres.'), (5,'Ilhas Conami','Arquip\u00e9logo de Ilhas onde Nami nasceu. Era um arquip\u00e9logo quieto, at\u00e9 Arlong e seus piratas chegarem.'); INSERT INTO personagem_nao_hostil (id_personagem, nome, ocupacao, grupo_ocupacao, is_vendedor, is_personagem_historia) VALUES (1,'Coby', 'Cidadao', 'Nenhum', false, true), (2,'vendedor', 'Cidadao', 'Comercializar itens basicos', true, false), (3,'M\u00e3e da Rika', 'Cidadao', 'Dona de casa', false, true), (4,'Rika', 'Cidadao', 'Brincar', false, true), (5,'Marinheiro', 'Marinheiro', 'Patrulhar', false, false), (6,'Prefeito', 'Cidadao', 'Gerir um ilha', false, false), (7,'Comerciante', 'Cidadao', 'Vender e comprar itens de pessoas', true, false), (8,'Chuchu', 'Cidadao', 'Ser um cachorro', false, true); INSERT INTO inventario (id_personagem, id_item, qtd_item) VALUES (1, 1, 1), (1, 2, 3), (1, 3, 2), (1, 4, 3), (1, 5, 2); -- Miss\u00f5es INSERT INTO missao (id_missao, nome, descricao, qtd_experiencia, dificuldade, id_personagem) VALUES (1,'Come\u00e7o da jornada', 'Luffy derrota Alvida e segue sua viagem junto de Coby pra formar uma tripula\u00e7\u00e3o', 10, 0, 1), (2,'O grande espadachim aparece', 'Luffy e Coby conhecem e libertam o Ca\u00e7ador de Piratas Roronoa Zoro, que foi preso pelo Capit\u00e3o Morgan e seu filho Helmeppo', 10, 0, 1), (3,'Morgan VS Luffy', 'Luffy e o mais novo membro de sua tripula\u00e7\u00e3o, Roronoa Zoro, lutam contra o Capit\u00e3o Morgan', 10, 0, 1), (4,'Palha\u00e7o-Pirata, Capit\u00e3o Buggy', 'Luffy e Zoro se deparam o Capit\u00e3o Buggy', 10, 0, 1), (5,'Mohji, o domador VS Luffy', 'Luffy consegue se libertar da jaula em que estava preso e luta contra Mohji e Richie', 10, 0, 1); INSERT INTO objetivo (id_missao, nome, descricao, tipo, id_item, id_inimigo, id_nao_hostil) VALUES (1, '', 'Luffy derrota piratas do bando da Alvida', 'DerrotarInimigo', NULL, NULL, NULL), (1, '', 'Luffy da o golpe final e manda Alvida pelos ares', 'DerrotarInimigo', NULL, NULL, NULL), (2, '', 'Luffy derrota os marinheiros que estavam guardando as espadas de Roronoa Zoro', 'DerrotarInimigo', NULL, NULL, NULL), (2, '', 'Luffy pega as espadas de Roronoa Zoro, que tinham sido confiscadas pela marinha', 'PegarItem', NULL, NULL, NULL), (2, '', 'Luffy liberta Roronoa Zoro e devolve suas espadas', 'FalarComNPC', NULL, NULL, NULL), (3, '', 'Luffy e Zoro derrotam os marinheiros que estavam protegendo o Capit\u00e3o Morgan', 'DerrotarInimigo', NULL, NULL, NULL), (3, '', 'Luffy e Zoro vencem o Capit\u00e3o Morgan', 'DerrotarInimigo', NULL, NULL, NULL), (3, '', 'Coby se dispede de Luffy para seguir sua ambi\u00e7\u00e3o de se tornar um marinheiro.', 'FalarComNPC', NULL, NULL, NULL), (4, '', 'Luffy derrota piratas do Capit\u00e3o Buggy', 'DerrotarInimigo', NULL, NULL, NULL), (4, '', 'Nami engana Luffy e o entrega para Buggy', 'DerrotarInimigo', NULL, NULL, NULL), (4, '', 'Luffy enfrenta Richie', 'DerrotarInimigo', NULL, NULL, NULL); insert into regiao (descricao,tipo,norte,sul,leste,oeste,id_ilha) values ('Porto onde voc\u00ea pode viajar para outras cidades','Cidade',2,NULL,NULL,4,1), -- 1 ('Feira onde voc\u00ea pode comprar itens','Cidade',3,NULL,1,NULL,1), -- 2 ('Taverna onde voc\u00ea encontra variedades da cacha\u00e7a, mas o Luffy s\u00f3 toma leite','Cidade',NULL,3,2,NULL,1), -- 3 ('Base da Marinha, parece que Zoro se encontra l\u00e1, Converse com Rika.','Cidade',NULL,1,NULL,3,1), -- 4 ('Porto de Orange Town','Cidade',6,NULL,7,NULL,2), -- 5 ('Loja Cachorro Xuxu','Cidade',NULL,7,5,NULL,2), -- 6 ('Base Buggy','Cidade',NULL,8,NULL,6,2), -- 7 ('Casa do Prefeito','Cidade',7,NULL,NULL,5,2),-- 8 ('Porto sa\u00edda Sul','Cidade',10,NULL,12,NULL,3), -- 9 ('Loja Cachorro Xuxu','Cidade',NULL,7,5,NULL,3), -- 10 ('Base Buggy','Cidade',NULL,8,NULL,6,3), -- 11 ('Casa do Prefeito','Cidade',7,NULL,NULL,5,3); -- 12","title":"Vers\u00e3o Atual"},{"location":"dml/#versoes-anteriores","text":"","title":"Vers\u00f5es Anteriores"},{"location":"dql/","text":"Vers\u00e3o Atual -- Poder especial SELECT nome, id_personagem_principal, descricao, dano, energia FROM poder_especial; SELECT nome, descricao FROM poder_especial WHERE dano > 900 AND energia >= 300; SELECT * FROM poder_especial WHERE nome='Tankman'; -- Objetivo SELECT * FROM objetivo WHERE is_active = true; SELECT * FROM objetivo WHERE id_missao = %d; SELECT * FROM objetivo WHERE is_completed = true; SELECT * FROM objetivo WHERE id_missao = %d AND id_objetivo = %d; -- Missao SELECT * FROM missao WHERE id_missao = %d; SELECT qtd_experiencia FROM missao WHERE id_missao = 1; UPDATE personagem_principal SET experiencia = experiencia + 10 WHERE id_personagem = 1; -- Inventario SELECT inventario.id_personagem, item.nome,item.descricao, item.preco, item.qtd_energia, item.qtd_vida,item.qtd_dano, personagem_principal.nome from inventario INNER JOIN item on inventario.id_item = item.id_item JOIN personagem_principal on inventario.id_personagem = personagem_principal.id_personagem; -- Barco SELECT id_barco, nome, ocupacao, grupo_ocupacao, capacidade_de_itens FROM barco; SELECT * FROM barco WHERE nome='Moby Dick'; -- Item SELECT * FROM item WHERE is_equipavel= 'TRUE'; SELECT * FROM item where is_equipavel = 'FALSE'; SELECT nome, descricao, preco, qtd_energia, qtd_vida FROM item where nome = 'bergamota'; SELECT nome, descricao, preco, qtd_energia, qtd_vida FROM item where nome = 'melancia'; SELECT nome, descricao, preco, qtd_energia, qtd_vida FROM item where nome = 'guarana'; SELECT nome, descricao, preco, qtd_energia, qtd_vida FROM item where nome = 'abacaxi'; SELECT nome, descricao, preco, qtd_energia, qtd_vida FROM item where nome = 'bergamota'; SELECT nome, descricao, preco, qtd_energia, qtd_vida, qtd_dano FROM item where nome = 'laminada'; SELECT nome, descricao, preco, qtd_energia, qtd_vida, qtd_dano FROM item where nome = 'rapidez'; -- Personagem n\u00e3o hostil SELECT nome, ocupacao, grupo_ocupacao, is_vendedor FROM personagem_nao_hostil WHERE id_personagem=%d -- Personagem principal SELECT * from personagem_principal; -- inimigo select * from inimigo; select * from inimigo where vida > 100; select * from inimigo where ocupacao = 'Marinheiro'; SELECT * FROM inimigo where ocupacao = 'Pirata'; -- Ilha SELECT * FROM ilha; -- Regi\u00e3o SELECT * FROM regiao; SELECT * from regiao where id_ilha = 1; WITH current_reg AS (VALUES (1)) select * from regiao where id_regiao IN ( (SELECT norte from regiao where id_regiao = (table current_reg)) UNION (SELECT sul from regiao where id_regiao = (table current_reg)) UNION (SELECT leste from regiao where id_regiao = (table current_reg)) UNION (SELECT oeste from regiao where id_regiao = (table current_reg)) ); Vers\u00f5es Anteriores","title":"DQL"},{"location":"dql/#versao-atual","text":"-- Poder especial SELECT nome, id_personagem_principal, descricao, dano, energia FROM poder_especial; SELECT nome, descricao FROM poder_especial WHERE dano > 900 AND energia >= 300; SELECT * FROM poder_especial WHERE nome='Tankman'; -- Objetivo SELECT * FROM objetivo WHERE is_active = true; SELECT * FROM objetivo WHERE id_missao = %d; SELECT * FROM objetivo WHERE is_completed = true; SELECT * FROM objetivo WHERE id_missao = %d AND id_objetivo = %d; -- Missao SELECT * FROM missao WHERE id_missao = %d; SELECT qtd_experiencia FROM missao WHERE id_missao = 1; UPDATE personagem_principal SET experiencia = experiencia + 10 WHERE id_personagem = 1; -- Inventario SELECT inventario.id_personagem, item.nome,item.descricao, item.preco, item.qtd_energia, item.qtd_vida,item.qtd_dano, personagem_principal.nome from inventario INNER JOIN item on inventario.id_item = item.id_item JOIN personagem_principal on inventario.id_personagem = personagem_principal.id_personagem; -- Barco SELECT id_barco, nome, ocupacao, grupo_ocupacao, capacidade_de_itens FROM barco; SELECT * FROM barco WHERE nome='Moby Dick'; -- Item SELECT * FROM item WHERE is_equipavel= 'TRUE'; SELECT * FROM item where is_equipavel = 'FALSE'; SELECT nome, descricao, preco, qtd_energia, qtd_vida FROM item where nome = 'bergamota'; SELECT nome, descricao, preco, qtd_energia, qtd_vida FROM item where nome = 'melancia'; SELECT nome, descricao, preco, qtd_energia, qtd_vida FROM item where nome = 'guarana'; SELECT nome, descricao, preco, qtd_energia, qtd_vida FROM item where nome = 'abacaxi'; SELECT nome, descricao, preco, qtd_energia, qtd_vida FROM item where nome = 'bergamota'; SELECT nome, descricao, preco, qtd_energia, qtd_vida, qtd_dano FROM item where nome = 'laminada'; SELECT nome, descricao, preco, qtd_energia, qtd_vida, qtd_dano FROM item where nome = 'rapidez'; -- Personagem n\u00e3o hostil SELECT nome, ocupacao, grupo_ocupacao, is_vendedor FROM personagem_nao_hostil WHERE id_personagem=%d -- Personagem principal SELECT * from personagem_principal; -- inimigo select * from inimigo; select * from inimigo where vida > 100; select * from inimigo where ocupacao = 'Marinheiro'; SELECT * FROM inimigo where ocupacao = 'Pirata'; -- Ilha SELECT * FROM ilha; -- Regi\u00e3o SELECT * FROM regiao; SELECT * from regiao where id_ilha = 1; WITH current_reg AS (VALUES (1)) select * from regiao where id_regiao IN ( (SELECT norte from regiao where id_regiao = (table current_reg)) UNION (SELECT sul from regiao where id_regiao = (table current_reg)) UNION (SELECT leste from regiao where id_regiao = (table current_reg)) UNION (SELECT oeste from regiao where id_regiao = (table current_reg)) );","title":"Vers\u00e3o Atual"},{"location":"dql/#versoes-anteriores","text":"","title":"Vers\u00f5es Anteriores"},{"location":"mer/","text":"Vers\u00e3o Atual Vers\u00f5es Anteriores M\u00f3dulo 1","title":"Modelo Entidade Relacionamento"},{"location":"mer/#versao-atual","text":"","title":"Vers\u00e3o Atual"},{"location":"mer/#versoes-anteriores","text":"","title":"Vers\u00f5es Anteriores"},{"location":"mer/#modulo-1","text":"","title":"M\u00f3dulo 1"},{"location":"mr/","text":"Vers\u00e3o Atual Vers\u00f5es Anteriores M\u00f3dulo 1","title":"Modelo Relacional"},{"location":"mr/#versao-atual","text":"","title":"Vers\u00e3o Atual"},{"location":"mr/#versoes-anteriores","text":"","title":"Vers\u00f5es Anteriores"},{"location":"mr/#modulo-1","text":"","title":"M\u00f3dulo 1"},{"location":"triggerandprocedures/","text":"Vers\u00e3o Atual --- TRIGGERS PARA MANTER AS REGRAS DE GENERALIZA\u00c7\u00c3O E ESPECIALIZA\u00c7\u00c3O CREATE OR REPLACE FUNCTION check_personagem_nao_hostil() RETURNS TRIGGER AS $check_personagem_nao_hostil$ BEGIN PERFORM * FROM personagem_principal WHERE id_personagem = NEW.id_personagem; IF FOUND THEN RAISE EXCEPTION 'Este personagem j\u00e1 se encontra na tabela personagem principal'; END IF; RETURN NEW; END; $check_personagem_nao_hostil$ LANGUAGE plpgsql; CREATE TRIGGER check_personagem_nao_hostil BEFORE UPDATE OR INSERT ON personagem_nao_hostil FOR EACH ROW EXECUTE PROCEDURE check_personagem_nao_hostil(); CREATE OR REPLACE FUNCTION check_personagem() RETURNS trigger as $check_personagem$ BEGIN PERFORM * FROM personagem_principal WHERE id_personagem = NEW.id_personagem; IF FOUND THEN RAISE EXCEPTION 'Este personagem j\u00e1 se encontra na tabela personagem principal'; END IF; RETURN NEW; END; $check_personagem$ LANGUAGE plpgsql; CREATE TRIGGER check_personagem BEFORE UPDATE OR INSERT ON inimigo FOR EACH ROW EXECUTE PROCEDURE check_personagem(); CREATE OR REPLACE FUNCTION check_barco() RETURNS trigger as $check_barco$ BEGIN PERFORM * FROM personagem_principal WHERE id_personagem = NEW.id_barco; IF FOUND THEN RAISE EXCEPTION 'Este personagem j\u00e1 se encontra na tabela personagem principal'; END IF; RETURN NEW; END; $check_barco$ LANGUAGE plpgsql; CREATE TRIGGER check_barco BEFORE UPDATE OR INSERT on barco FOR EACH ROW EXECUTE PROCEDURE check_barco(); --Vitor -- Cria jogador, Cria um personagem principal pro Jogador CREATE OR REPLACE FUNCTION create_save_jogador() RETURNS TRIGGER as $create_save_jogador$ DECLARE save_player VARCHAR(30); BEGIN SELECT nome into save_player from save WHERE nome = NEW.nome; INSERT INTO jogador VALUES(save_player,1,1,'Monkey D. Luffy','Pirata','Piratas do Chap\u00e9u de Palha',150,100,100,'Kairoseki',1,100,120,10); RETURN NEW; END; $create_save_jogador$ LANGUAGE plpgsql; CREATE TRIGGER create_save_jogador AFTER INSERT ON save FOR EACH ROW EXECUTE PROCEDURE create_save_jogador(); -- objetivo cumprido pra liberar o pr\u00f3ximo - tabela -- Bernardo -- trigger para miss\u00e3o cumprida CREATE FUNCTION check_missao_cumprida() RETURN trigger AS $check_missao_cumprida$ DECLARE obj_count INTEGER, obj_comc_count INTEGER, xp_missao INTEGER, xp_perso INTEGER BEGIN SELECT COUNT(*) INTO obj_count FROM objetivo_status WHERE NEW.id_missao = OLD.id_missao AND NEW.id_jogador_save = OLD.id_jogador_save AND NEW.id_jogador_personagem = OLD.id_jogador_personagem; SELECT COUNT(*) INTO obj_comc_count FROM objetivo_status WHERE NEW.objetivo_status_enum = 'Concluido' AND NEW.id_jogador_save = OLD.id_jogador_save SELECT qtd_experiencia INTO xp_missao FROM missao WHERE NEW.id_missao = OLD.id_missao; SELECT experiencia INTO xp_perso FROM personagem_principal WHERE NEW.id_jogador_personagem = OLD.id_jogador_personagem; IF obj_count = obj_comp_count THEN UPDATE personagem_principal SET experiencia = xp_perso + xp_missao WHERE id_personagem = id_jogador_personagem; END IF; END; CREATE trigger check_missao_cumprida AFTER UPDATE ON objetivo_status for each ROW EXECUTE PROCEDURE check_missao_cumprida(); -- Procedure para quando o jogador mata um inimigo CREATE OR REPLACE PROCEDURE inimigo_morre(id_jogador_param INTEGER, id_inimigo_param INTEGER, nome_save_param VARCHAR(30) ) AS $inimigo_morre$ DECLARE vida_inimigo INTEGER; experiencia_jogador INTEGER; exeperiencia_inimigo INTEGER; BEGIN SELECT vida INTO vida_inimigo FROM inimigo WHERE id_personagem = OLD.id_personagem; -- pega a vida do inimigo SELECT experiencia INTO experiencia_jogador FROM jogador WHERE id_jogador = id_jogador_param; -- pega a experiencia do jogador SELECT experiencia INTO exeperiencia_inimigo FROM inimigo WHERE id_inimigo = id_inimigo_param; -- pega a experiencia do inimigo IF vida_inimigo <= 0 THEN UPDATE jogador SET experiencia = experiencia_jogador + exeperiencia_inimigo WHERE id_personagem = id_jogador_param AND nome_save = nome_save_param; END IF; END; $inimigo_morre$ LANGUAGE plpgsql; -- Thalisson -- respawn e spawn dos inimigos em determinada regi\u00e3o qnd tu entra l\u00e1. CREATE OR REPLACE FUNCTION spawn_inimigo() RETURNS trigger AS $spawn_inimigo$ BEGIN IF (NEW.id_regiao <> OLD.id_regiao) THEN -- Respawna inimigos de miss\u00f5es UPDATE inimigo SET vida = vida_maxima, energia = energia_maxima WHERE id_regiao = NEW.id_regiao AND (id_missao, id_objetivo) IN (SELECT id_missao,id_objetivo FROM objetivo_status WHERE status='Em andamento' AND id_jogador_save = NEW.nome_save AND id_jogador_personagem = NEW.id_personagem); -- Respawan inimigos comuns UPDATE inimigo SET vida = vida_maxima, energia = energia_maxima WHERE id_regiao = NEW.id_regiao; END IF; RETURN NEW; END; $spawn_inimigo$ LANGUAGE plpgsql; DROP TRIGGER spawn_inimigo_trigger ON jogador; CREATE TRIGGER spawn_inimigo_trigger BEFORE UPDATE ON jogador FOR EACH ROW EXECUTE PROCEDURE spawn_inimigo(); -- compra de itens -- Nicolas (Tenho que revisar) -- Atualiza n\u00edvel consequentemente atualiza poder especial CREATE OR REPLACE FUNCTION level_up() RETURNS trigger AS $level_up$ DECLARE xp_atual INTEGER; BEGIN SELECT experiencia INTO xp_atual FROM personagem_principal WHERE id_personagem = NEW.id_personagem; IF(xp_atual >= 20) THEN PERFORM * FROM poder_especial WHERE nome = 'Gomu Gomu no Pistol'; IF NOT FOUND THEN INSERT INTO poder_especial (nome,tipo_poder ,id_personagem, descricao, dano, energia) VALUES ('Gomu Gomu no Pistol','Akuma no mi',1,'Soco pistola do Luffy',80,50); END IF; END IF; IF(xp_atual >= 40) THEN PERFORM * FROM poder_especial WHERE nome = 'Gomu Gomu no Gatling Gun'; IF NOT FOUND THEN INSERT INTO poder_especial (nome,tipo_poder ,id_personagem, descricao, dano, energia) VALUES ('Gomu Gomu no Gatling Gun','Akuma no mi',1,'Metralhadora de Soco pistola do Luffy',140,100); END IF; END IF; IF(xp_atual >= 100) THEN PERFORM * FROM poder_especial WHERE nome = 'Gomu Gomu no Axe'; IF NOT FOUND THEN INSERT INTO poder_especial (nome,tipo_poder ,id_personagem, descricao, dano, energia) VALUES ('Gomu Gomu no Axe','Akuma no mi',1,'Luffy estica o p\u00e9 l\u00e1 no alto e desce de uma vez dando uma p\u00e9zada da peste.',160,80); END IF; END IF; IF(xp_atual >= 200 ) THEN PERFORM * FROM poder_especial WHERE nome = 'Gomu Gomu no Rocket'; IF NOT FOUND THEN INSERT INTO poder_especial (nome,tipo_poder ,id_personagem, descricao, dano, energia) VALUES ('Gomu Gomu no Rocket','Akuma no mi',1,'Luffy se lan\u00e7a para atingir o alvo.',50,25); END IF; END IF; return new; END; $level_up$ LANGUAGE plpgsql; CREATE trigger level_up AFTER UPDATE ON personagem_principal FOR EACH ROW EXECUTE PROCEDURE level_up(); -- Invent\u00e1rio lotado, n\u00e3o pode receber item. CREATE OR REPLACE FUNCTION check_inventario() RETURNS trigger AS $check_inventario$ DECLARE itens_total INTEGER; max_itens INTEGER; new_itens INTEGER; BEGIN -- pega o total de itens que o personagem carrega e sua capacidade maxiam SELECT SUM(qtd_item) INTO itens_total FROM inventario_personagem WHERE id_personagem = NEW.id_personagem; SELECT capacidade_de_itens INTO max_itens FROM personagem_principal WHERE id_personagem = NEW.id_personagem; -- verifica se o novo total de itens cabe no inventario IF( itens_total > max_itens ) THEN RAISE EXCEPTION 'Invent\u00e1rio Cheio!'; END IF; return new; END; $check_inventario$ LANGUAGE plpgsql; CREATE trigger check_inventario AFTER UPDATE ON inventario_personagem FOR EACH ROW EXECUTE PROCEDURE check_inventario(); -- check_missao Vasco -- compra um item tem que diminuir o dinheiro -- antes do insert ================== tem que checar se est\u00e1 vazio o invent\u00e1rio -- tirar dinheiro do personagem principal && jogador -- pre\u00e7o do item -- como funciona a compra ? -- vc fala com um npc e o npc te oferece itens do invent\u00e1rio dele -- se aceitar a compra, tem que tirar a grana do jogador e incrementar no npc CREATE OR REPLACE procedure compra2(id_item INTEGER, qtd_item INTEGER, nome_jog VARCHAR(30),persona INTEGER) AS $compra2$ declare berry INTEGER; BEGIN Select berries into berry from jogador WHERE nome_save = nome_jog and id_personagem = persona; -- if vc n\u00e3o tem grana, n\u00e3o compra. if berry < preco THEN RAISE EXCEPTION 'Voc\u00ea n\u00e3o tem Berries suficiente para comprar.'; end if; INSERT INTO inventario_jogador (id_jogador_save, id_jogador_personagem, id_item, qtd_item) VALUES (nome_jog, persona, id_item, qtd_item); -- pre\u00e7o do item UPDATE jogador SET berries = berries - preco WHERE nome_save = nome_jog and id_personagem = persona; END; $compra2$ LANGUAGE plpgsql; CREATE or replace FUNCTION check_missao() RETURNs trigger AS $check_missao$ DECLARE obj_count INTEGER; obj_comp_count INTEGER; xp_missao INTEGER; xp_perso INTEGER; BEGIN IF OLD.status = NEW.status THEN RETURN NEW; END IF; SELECT COUNT(*) INTO obj_count FROM objetivo WHERE id_missao = OLD.id_missao; SELECT COUNT(*) INTO obj_comp_count FROM objetivo_status WHERE status = 'Concluido' AND id_jogador_save = OLD.id_jogador_save and id_missao = OLD.id_missao AND id_jogador_personagem = OLD.id_jogador_personagem; IF obj_count <> obj_comp_count THEN RETURN NEW; END IF; SELECT qtd_experiencia INTO xp_missao FROM missao WHERE id_missao = OLD.id_missao; UPDATE jogador SET experiencia = experiencia + xp_missao WHERE id_personagem = old.id_jogador_personagem AND nome_save = old.id_jogador_save; return new; END; $check_missao$ LANGUAGE plpgsql; drop trigger rihana on objetivo_status; CREATE trigger rihana after UPDATE on objetivo_status for each ROW EXECUTE PROCEDURE check_missao();","title":"Triggers and procedures"},{"location":"triggerandprocedures/#versao-atual","text":"--- TRIGGERS PARA MANTER AS REGRAS DE GENERALIZA\u00c7\u00c3O E ESPECIALIZA\u00c7\u00c3O CREATE OR REPLACE FUNCTION check_personagem_nao_hostil() RETURNS TRIGGER AS $check_personagem_nao_hostil$ BEGIN PERFORM * FROM personagem_principal WHERE id_personagem = NEW.id_personagem; IF FOUND THEN RAISE EXCEPTION 'Este personagem j\u00e1 se encontra na tabela personagem principal'; END IF; RETURN NEW; END; $check_personagem_nao_hostil$ LANGUAGE plpgsql; CREATE TRIGGER check_personagem_nao_hostil BEFORE UPDATE OR INSERT ON personagem_nao_hostil FOR EACH ROW EXECUTE PROCEDURE check_personagem_nao_hostil(); CREATE OR REPLACE FUNCTION check_personagem() RETURNS trigger as $check_personagem$ BEGIN PERFORM * FROM personagem_principal WHERE id_personagem = NEW.id_personagem; IF FOUND THEN RAISE EXCEPTION 'Este personagem j\u00e1 se encontra na tabela personagem principal'; END IF; RETURN NEW; END; $check_personagem$ LANGUAGE plpgsql; CREATE TRIGGER check_personagem BEFORE UPDATE OR INSERT ON inimigo FOR EACH ROW EXECUTE PROCEDURE check_personagem(); CREATE OR REPLACE FUNCTION check_barco() RETURNS trigger as $check_barco$ BEGIN PERFORM * FROM personagem_principal WHERE id_personagem = NEW.id_barco; IF FOUND THEN RAISE EXCEPTION 'Este personagem j\u00e1 se encontra na tabela personagem principal'; END IF; RETURN NEW; END; $check_barco$ LANGUAGE plpgsql; CREATE TRIGGER check_barco BEFORE UPDATE OR INSERT on barco FOR EACH ROW EXECUTE PROCEDURE check_barco(); --Vitor -- Cria jogador, Cria um personagem principal pro Jogador CREATE OR REPLACE FUNCTION create_save_jogador() RETURNS TRIGGER as $create_save_jogador$ DECLARE save_player VARCHAR(30); BEGIN SELECT nome into save_player from save WHERE nome = NEW.nome; INSERT INTO jogador VALUES(save_player,1,1,'Monkey D. Luffy','Pirata','Piratas do Chap\u00e9u de Palha',150,100,100,'Kairoseki',1,100,120,10); RETURN NEW; END; $create_save_jogador$ LANGUAGE plpgsql; CREATE TRIGGER create_save_jogador AFTER INSERT ON save FOR EACH ROW EXECUTE PROCEDURE create_save_jogador(); -- objetivo cumprido pra liberar o pr\u00f3ximo - tabela -- Bernardo -- trigger para miss\u00e3o cumprida CREATE FUNCTION check_missao_cumprida() RETURN trigger AS $check_missao_cumprida$ DECLARE obj_count INTEGER, obj_comc_count INTEGER, xp_missao INTEGER, xp_perso INTEGER BEGIN SELECT COUNT(*) INTO obj_count FROM objetivo_status WHERE NEW.id_missao = OLD.id_missao AND NEW.id_jogador_save = OLD.id_jogador_save AND NEW.id_jogador_personagem = OLD.id_jogador_personagem; SELECT COUNT(*) INTO obj_comc_count FROM objetivo_status WHERE NEW.objetivo_status_enum = 'Concluido' AND NEW.id_jogador_save = OLD.id_jogador_save SELECT qtd_experiencia INTO xp_missao FROM missao WHERE NEW.id_missao = OLD.id_missao; SELECT experiencia INTO xp_perso FROM personagem_principal WHERE NEW.id_jogador_personagem = OLD.id_jogador_personagem; IF obj_count = obj_comp_count THEN UPDATE personagem_principal SET experiencia = xp_perso + xp_missao WHERE id_personagem = id_jogador_personagem; END IF; END; CREATE trigger check_missao_cumprida AFTER UPDATE ON objetivo_status for each ROW EXECUTE PROCEDURE check_missao_cumprida(); -- Procedure para quando o jogador mata um inimigo CREATE OR REPLACE PROCEDURE inimigo_morre(id_jogador_param INTEGER, id_inimigo_param INTEGER, nome_save_param VARCHAR(30) ) AS $inimigo_morre$ DECLARE vida_inimigo INTEGER; experiencia_jogador INTEGER; exeperiencia_inimigo INTEGER; BEGIN SELECT vida INTO vida_inimigo FROM inimigo WHERE id_personagem = OLD.id_personagem; -- pega a vida do inimigo SELECT experiencia INTO experiencia_jogador FROM jogador WHERE id_jogador = id_jogador_param; -- pega a experiencia do jogador SELECT experiencia INTO exeperiencia_inimigo FROM inimigo WHERE id_inimigo = id_inimigo_param; -- pega a experiencia do inimigo IF vida_inimigo <= 0 THEN UPDATE jogador SET experiencia = experiencia_jogador + exeperiencia_inimigo WHERE id_personagem = id_jogador_param AND nome_save = nome_save_param; END IF; END; $inimigo_morre$ LANGUAGE plpgsql; -- Thalisson -- respawn e spawn dos inimigos em determinada regi\u00e3o qnd tu entra l\u00e1. CREATE OR REPLACE FUNCTION spawn_inimigo() RETURNS trigger AS $spawn_inimigo$ BEGIN IF (NEW.id_regiao <> OLD.id_regiao) THEN -- Respawna inimigos de miss\u00f5es UPDATE inimigo SET vida = vida_maxima, energia = energia_maxima WHERE id_regiao = NEW.id_regiao AND (id_missao, id_objetivo) IN (SELECT id_missao,id_objetivo FROM objetivo_status WHERE status='Em andamento' AND id_jogador_save = NEW.nome_save AND id_jogador_personagem = NEW.id_personagem); -- Respawan inimigos comuns UPDATE inimigo SET vida = vida_maxima, energia = energia_maxima WHERE id_regiao = NEW.id_regiao; END IF; RETURN NEW; END; $spawn_inimigo$ LANGUAGE plpgsql; DROP TRIGGER spawn_inimigo_trigger ON jogador; CREATE TRIGGER spawn_inimigo_trigger BEFORE UPDATE ON jogador FOR EACH ROW EXECUTE PROCEDURE spawn_inimigo(); -- compra de itens -- Nicolas (Tenho que revisar) -- Atualiza n\u00edvel consequentemente atualiza poder especial CREATE OR REPLACE FUNCTION level_up() RETURNS trigger AS $level_up$ DECLARE xp_atual INTEGER; BEGIN SELECT experiencia INTO xp_atual FROM personagem_principal WHERE id_personagem = NEW.id_personagem; IF(xp_atual >= 20) THEN PERFORM * FROM poder_especial WHERE nome = 'Gomu Gomu no Pistol'; IF NOT FOUND THEN INSERT INTO poder_especial (nome,tipo_poder ,id_personagem, descricao, dano, energia) VALUES ('Gomu Gomu no Pistol','Akuma no mi',1,'Soco pistola do Luffy',80,50); END IF; END IF; IF(xp_atual >= 40) THEN PERFORM * FROM poder_especial WHERE nome = 'Gomu Gomu no Gatling Gun'; IF NOT FOUND THEN INSERT INTO poder_especial (nome,tipo_poder ,id_personagem, descricao, dano, energia) VALUES ('Gomu Gomu no Gatling Gun','Akuma no mi',1,'Metralhadora de Soco pistola do Luffy',140,100); END IF; END IF; IF(xp_atual >= 100) THEN PERFORM * FROM poder_especial WHERE nome = 'Gomu Gomu no Axe'; IF NOT FOUND THEN INSERT INTO poder_especial (nome,tipo_poder ,id_personagem, descricao, dano, energia) VALUES ('Gomu Gomu no Axe','Akuma no mi',1,'Luffy estica o p\u00e9 l\u00e1 no alto e desce de uma vez dando uma p\u00e9zada da peste.',160,80); END IF; END IF; IF(xp_atual >= 200 ) THEN PERFORM * FROM poder_especial WHERE nome = 'Gomu Gomu no Rocket'; IF NOT FOUND THEN INSERT INTO poder_especial (nome,tipo_poder ,id_personagem, descricao, dano, energia) VALUES ('Gomu Gomu no Rocket','Akuma no mi',1,'Luffy se lan\u00e7a para atingir o alvo.',50,25); END IF; END IF; return new; END; $level_up$ LANGUAGE plpgsql; CREATE trigger level_up AFTER UPDATE ON personagem_principal FOR EACH ROW EXECUTE PROCEDURE level_up(); -- Invent\u00e1rio lotado, n\u00e3o pode receber item. CREATE OR REPLACE FUNCTION check_inventario() RETURNS trigger AS $check_inventario$ DECLARE itens_total INTEGER; max_itens INTEGER; new_itens INTEGER; BEGIN -- pega o total de itens que o personagem carrega e sua capacidade maxiam SELECT SUM(qtd_item) INTO itens_total FROM inventario_personagem WHERE id_personagem = NEW.id_personagem; SELECT capacidade_de_itens INTO max_itens FROM personagem_principal WHERE id_personagem = NEW.id_personagem; -- verifica se o novo total de itens cabe no inventario IF( itens_total > max_itens ) THEN RAISE EXCEPTION 'Invent\u00e1rio Cheio!'; END IF; return new; END; $check_inventario$ LANGUAGE plpgsql; CREATE trigger check_inventario AFTER UPDATE ON inventario_personagem FOR EACH ROW EXECUTE PROCEDURE check_inventario(); -- check_missao Vasco -- compra um item tem que diminuir o dinheiro -- antes do insert ================== tem que checar se est\u00e1 vazio o invent\u00e1rio -- tirar dinheiro do personagem principal && jogador -- pre\u00e7o do item -- como funciona a compra ? -- vc fala com um npc e o npc te oferece itens do invent\u00e1rio dele -- se aceitar a compra, tem que tirar a grana do jogador e incrementar no npc CREATE OR REPLACE procedure compra2(id_item INTEGER, qtd_item INTEGER, nome_jog VARCHAR(30),persona INTEGER) AS $compra2$ declare berry INTEGER; BEGIN Select berries into berry from jogador WHERE nome_save = nome_jog and id_personagem = persona; -- if vc n\u00e3o tem grana, n\u00e3o compra. if berry < preco THEN RAISE EXCEPTION 'Voc\u00ea n\u00e3o tem Berries suficiente para comprar.'; end if; INSERT INTO inventario_jogador (id_jogador_save, id_jogador_personagem, id_item, qtd_item) VALUES (nome_jog, persona, id_item, qtd_item); -- pre\u00e7o do item UPDATE jogador SET berries = berries - preco WHERE nome_save = nome_jog and id_personagem = persona; END; $compra2$ LANGUAGE plpgsql; CREATE or replace FUNCTION check_missao() RETURNs trigger AS $check_missao$ DECLARE obj_count INTEGER; obj_comp_count INTEGER; xp_missao INTEGER; xp_perso INTEGER; BEGIN IF OLD.status = NEW.status THEN RETURN NEW; END IF; SELECT COUNT(*) INTO obj_count FROM objetivo WHERE id_missao = OLD.id_missao; SELECT COUNT(*) INTO obj_comp_count FROM objetivo_status WHERE status = 'Concluido' AND id_jogador_save = OLD.id_jogador_save and id_missao = OLD.id_missao AND id_jogador_personagem = OLD.id_jogador_personagem; IF obj_count <> obj_comp_count THEN RETURN NEW; END IF; SELECT qtd_experiencia INTO xp_missao FROM missao WHERE id_missao = OLD.id_missao; UPDATE jogador SET experiencia = experiencia + xp_missao WHERE id_personagem = old.id_jogador_personagem AND nome_save = old.id_jogador_save; return new; END; $check_missao$ LANGUAGE plpgsql; drop trigger rihana on objetivo_status; CREATE trigger rihana after UPDATE on objetivo_status for each ROW EXECUTE PROCEDURE check_missao();","title":"Vers\u00e3o Atual"}]}